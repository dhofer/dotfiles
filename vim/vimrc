set nocompatible

filetype plugin on
filetype indent on

call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'
Plug 'cespare/vim-toml'
Plug 'fatih/vim-go'
Plug 'fatih/vim-hclfmt'
Plug 'hashivim/vim-terraform'
Plug 'Matt-Deacalion/vim-systemd-syntax'
Plug 'moby/moby', {'rtp': '/contrib/syntax/vim/'}
Plug 'rust-lang/rust.vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'elzr/vim-json'
Plug 'kien/ctrlp'

call plug#end()

set encoding=utf-8
" allow unsaved background buffers and remember marks/undo for them
set hidden
" remember more commands and searches
set history=1000
" always show status line
set laststatus=2
" custom status line
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
" highlight current line
set cursorline
" height of command line
set cmdheight=2
" show line numbers
set number
" minimal number of columns to use for the line number
set numberwidth=5
" always show tab page labels
set showtabline=2
" minimal number of columns for current window
set winwidth=79
" prevent vim from clobbering the scrollback buffer
set t_ti= t_te=
" keep more context when scrolling off the end of a buffer
set scrolloff=5
" store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp//
set directory=~/.vim-tmp//,~/.tmp//,~/tmp//,/var/tmp//,/tmp//
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" display incomplete commands
set showcmd
" enable syntax highlighting
syntax on
" use emacs-style tab completion when selecting files etc.
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
" show line and column number of the cursor position
set ruler
" highlight screen column
set colorcolumn=81
" better list strings
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
" yank and paste with the system clipboard
set clipboard=unnamed
" tweak keyword detection for search & completion
let g:sh_noisk=1
set iskeyword+=-
" Insert only one space when joining lines that contain sentence-terminating
" punctuation like `.`.
set nojoinspaces
" do not wrap lines
set nowrap
" auto-reload files on changes
set autoread

set background=light
let g:solarized_termtrans = 1
colorscheme solarized

" set leader key to comma
let mapleader=","

" open files in directory of current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
nmap <leader>e :edit %%
nmap <leader>v :view %%

" toggle files
nnoremap <leader><leader> <c-^>

" toggle folds
nnoremap <space> za

" spell-check current file
nnoremap <leader>S :!aspell --check --dont-backup '%'<cr>

" re-hardwrap paragraphs of text
nnoremap <leader>q gwip

" create markdown h1 and h2 headings
nnoremap <leader>1 yypVr=
nnoremap <leader>2 yypVr-

" open current file with Marked app
nnoremap <leader>m :!marked '%'<cr><cr>

" save file with sudo
cmap w!! '%'!sudo tee > /dev/null '%'

" rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
nnoremap <leader>n :call RenameFile()<cr>

" promote variable to rspec let
function! PromoteToLet()
  normal! dd
  normal! P
  .s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  normal ==
endfunction
command! PromoteToLet :call PromoteToLet()
nnoremap <leader>p :PromoteToLet<cr>

" insert hash rocket with ctrl+l
imap <c-l> <space>=><space>

" disable arrow keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" move by screen line
nnoremap j gj
nnoremap k gk

" open new vertical/horizontal split and switch over to it
nnoremap <leader>w <c-w>v<c-w>l
nnoremap <leader>W <c-w>s<c-w>j

" move around splits more easily
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" remove smart quotes, etc.
function! RemoveFancyCharacters()
    let typo = {}
    let typo["“"] = '"'
    let typo["”"] = '"'
    let typo["‘"] = "'"
    let typo["’"] = "'"
    let typo["–"] = '--'
    let typo["—"] = '---'
    let typo["…"] = '...'
    :exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! RemoveFancyCharacters :call RemoveFancyCharacters()

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :nohlsearch<cr>
nnoremap <tab> %
vnoremap <tab> %

let g:ctrlp_map = '<leader>f'
nmap <leader>F :CtrlP %%<cr>
nmap <leader>l :CtrlPBuffer<cr>

let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:20'
let g:ctrlp_use_caching = 0

set wildignore+=*/vendor/*,*/Godeps/_workspace/*,*/target/*,*/tmp/*,*/node_modules/*,*.class

nnoremap <leader>c :Gcommit --verbose '%'<cr>
nnoremap <leader>C :Gcommit --verbose --all<cr>

nnoremap <leader>d :!git diff '%'<cr>
nnoremap <leader>D :!git diff<cr>

" open a split for each dirty file in git
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\|UU\)" | sed "s/^.\{3\}//"')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "vsp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

let g:go_fmt_command = "goimports"

let g:rustfmt_autosave = 0

xmap \\  <Plug>Commentary
nmap \\\ <Plug>CommentaryLine
nmap \\u <Plug>CommentaryUndo

let g:terraform_align = 1
let g:terraform_fold_sections = 1

augroup vimrcEx
  " clear all autocmds in this group
  autocmd!

  " jump to last cursor position
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
  autocmd BufReadPost COMMIT_EDITMSG,PULLREQ_EDITMSG exe "normal! gg"

  " detect present files
  autocmd BufNewFile,BufRead *.slide set filetype=present

  " language-dependent indenting
  autocmd FileType text,markdown,present setlocal ts=4 sw=4 et si tw=80
  autocmd FileType sh,perl,awk,python,dockerfile setlocal ts=4 sw=4 et si
  autocmd FileType ruby,cucumber,yaml,vim setlocal ts=2 sw=2 et si
  autocmd FileType c,h,cpp setlocal ts=8 sw=8 noet cindent
  autocmd FileType make setlocal ts=8 sw=8 noet
  autocmd FileType asm setlocal ts=8 sw=8 noet

  " auto-complete file names when committing
  autocmd FileType gitcommit setlocal iskeyword+=.

  " speed up Ruby syntax highlighting
  autocmd FileType ruby setlocal re=1 nocursorline

  " auto-complete Ruby names up to ! and ?
  autocmd FileType ruby setlocal iskeyword+=!,?

  " Go mappings
  autocmd FileType go nnoremap <leader>t :silent w\|:GoTest<cr>
  autocmd FileType go nnoremap <leader>T :silent w\|:GoTestFunc<cr>
  autocmd FileType go nnoremap <leader>a :silent w\|:!go test -v -cover ./...<cr>
  autocmd FileType go nnoremap <leader>r :silent w\|:GoRun<cr>
  autocmd FileType go nnoremap <leader>b :silent w\|:GoBuild<cr>

  " Rust mappings
  autocmd FileType rust nnoremap <leader>t :silent w\|:RustRun! --test<cr>
  autocmd FileType rust nnoremap <leader>a :silent w\|:!cargo test<cr>
  autocmd FileType rust nnoremap <leader>r :silent w\|:!cargo run<cr>
  autocmd FileType rust nnoremap <leader>b :silent w\|:!cargo build<cr>

  " Terraform
  autocmd FileType terraform setlocal commentstring=#%s

  " enable spell-checking
  autocmd FileType text,markdown,gitcommit,present setlocal spell spelllang=en_us
augroup END

if filereadable(expand("$HOME/.vimrc.local"))
  source $HOME/.vimrc.local
endif
