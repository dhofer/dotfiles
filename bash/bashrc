# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Enable history expansion with space
# E.g. typing !!<space> will replace the !! with your last command
bind Space:magic-space

# Turn on recursive globbing (enables ** to recurse all directories)
shopt -s globstar 2> /dev/null

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob;

# Perform file completion in a case insensitive fashion
bind "set completion-ignore-case on"

# Treat hyphens and underscores as equivalent
bind "set completion-map-case on"

# Display matches for ambiguous patterns at first tab press
bind "set show-all-if-ambiguous on"

# Immediately add a trailing slash when autocompleting symlinks to directories
bind "set mark-symlinked-directories on"

# Save multi-line commands as one command
shopt -s cmdhist

# Record each line as it gets issued
export PROMPT_COMMAND="${PROMPT_COMMAND:+$PROMPT_COMMAND ;} history -a"

# Avoid duplicate entries
HISTCONTROL="erasedups:ignoreboth"

# Append to the history file, don't overwrite it
shopt -s histappend

# Set history length
HISTSIZE=500000
HISTFILESIZE=100000

# Don't record some commands
export HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '

# Enable incremental history search with up/down arrows (also Readline goodness)
# Learn more about this here: http://codeinthehole.com/writing/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind '"\e[C": forward-char'
bind '"\e[D": backward-char'

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

export CLICOLOR=1
export EDITOR=vim
export GITHUB_USER=dhofer

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Enable bash completion
if ! shopt -oq posix; then
    if [ -f /usr/share/bash-completion/bash_completion ]; then
        . /usr/share/bash-completion/bash_completion
    elif [ -f /etc/bash_completion ]; then
        . /etc/bash_completion
    elif [ -f "$HOMEBREW_PREFIX/etc/bash_completion"  ]; then
        . "$HOMEBREW_PREFIX/etc/bash_completion"
    fi
fi

# Go
if command -v go >/dev/null; then
    export GOPATH="$HOME/Source/go"
    export GOROOT="$(go env GOROOT)"
    export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

    gopath() {
        dir=$(
            cd "$GOPATH/src"
            cd "$(ls -d */*/* | fzf -q "$GITHUB_USER")"
            pwd
        ) && cd "$dir"
    }
fi

# Rust
if command -v cargo >/dev/null; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# GPG
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
    GPG_TTY=$(tty)
    export GPG_TTY
fi

# Kubernetes
if command -v kubectl >/dev/null; then
    export KUBECONFIG=$(find $HOME/.kube/configs/* 2> /dev/null | paste -s -d:)
    source <(kubectl completion bash)
fi

# Hcloud
if command -v hcloud >/dev/null; then
    source <(hcloud completion bash)
fi

# Set prompt
if [ -e "/usr/share/git-core/contrib/completion/git-prompt.sh" ]; then
    source "/usr/share/git-core/contrib/completion/git-prompt.sh"
    export PS1='[\h \[\e[1;36m\]\W\[\e[m\]$(declare -F __git_ps1 &>/dev/null && __git_ps1 " \[\e[1;32m\](%s)\[\e[m\]")]\$ '
else
    export PS1='[\h \[\e[1;36m\]\W\[\e[m\]]\$ '
fi

# set a fancy prompt
#PS1='\[\e]0;\u@\h: \w\a\]\[\033[33;1m\]\W\[\033[m\]$ '

# Include alias definitions
[ -f "$HOME/.bash_aliases" ] && . "$HOME/.bash_aliases"

# Source local settings if present
[ -f "$HOME/.bashrc.local" ] && . "$HOME/.bashrc.local"

:
